import React from 'react';
import axios from 'axios';
import InfiniteScroll from 'react-infinite-scroller';
import { log } from 'util';
class Content extends React.Component {
  constructor(props) {
    super(props);
    this.state = { repos: [], flag: '%3E1&sort=stars&order=desc&type=Repositories',loading:true };
  }

  async componentDidMount() {
    const res = await axios.get('https://api.github.com/search/repositories?q=stars:%3E1&sort=stars&order=desc&type=Repositories');
    this.setState({
      repos: res.data.items,
      loading:false
    });
  }

  async componentDidUpdate() {
    const a = this.props.data;
    const b = this.state.flag;
    const c = this.state.loading;
     
    if (a !== b) {
      if(c==false){
        this.setState({
        loading:true
      });
         return;    
      }
      const res = await axios.get(`https://api.github.com/search/repositories?q=stars:${this.props.data}`);
      console.log(this.state.loading);
      
      this.setState({
        repos: res.data.items,
        flag: a,
        loading:false
      });
    
  }
  }

  // avatar_url图片
  // html_url github
  // owner.html_url github详细
  // watchers
  // forks
  // open_issues

  render() {
    console.log('ss');
    
    const { acolor } = this.props;
    const style = {
      modeli: {
        width: '23%', background: 'rgba(0, 0, 0, 0.08)', margin: '10px 5px', boxSizing: 'border-box',
      },
      bdiv: {
        width: '90%',backgroundColor: '', margin: '0 auto', display: 'flex', justifyContent: 'center',flexWrap: 'wrap'
      },
      modeul: {
        display: 'flex', flexWrap: 'wrap', listStyle: 'none', justifyContent: 'space-around',
      },
      h4: {
        textAlign: 'center', fontSize: '35px', fontWeight: 300, margin: '20px',
      },
      img: {
        width: '150px', height: '150px', display: 'block', margin: '0 auto', borderRadius: '3px', marginBottom: '8px',
      },
      h2: { textAlign: 'center', margin: '30px 0' },
      h2a: { color: 'rgb(187, 46, 31)', fontWeight: 'bold', textDecoration: 'none' },
      ul: { listStyle: 'none', paddingLeft: '20px' },
      li: { listStyle: 'none', display: 'flex', marginBottom: '10px' },
      lia: {
        display: 'block', paddingTop: '5px', marginLeft: '10px', textDecoration: 'none', color: acolor, fontWeight: 'bold',
      },
      lispan: {
        display: 'block', paddingTop: '5px', marginLeft: '10px', textDecoration: 'none',
      },

    };
    const list = this.state.repos.map((item, key) => (
      <li style={style.modeli} key={item.id}>
        <h4 style={style.h4}>#{key + 1}</h4>
        <img src={item.owner.avatar_url} alt="" style={style.img} />
        <h2 style={style.h2}>
          <a href={item.html_url} style={style.h2a}>{item.name.substr(0, 9)}</a>
        </h2>
        <ul style={style.ul}>
          <li style={style.li}>
            <svg t="1573305482892" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="9731" width="32" height="32"><path d="M259.556 366.595c0-154.452 103.075-255.842 255.45-260.006-0.555-0.052-1.109-0.104-1.66-0.15 1.919 0 3.825 0.028 5.729 0.058 1.904-0.03 3.81-0.058 5.729-0.058-0.551 0.046-1.106 0.098-1.66 0.15 152.375 4.164 255.45 105.554 255.45 260.006 0 111.801-77.827 208.583-171.406 255.483 0.138 0.031 0.275 0.063 0.413 0.093l28.168-13.638c92.177-44.628 151.737-139.595 151.737-241.939 0-148.13-120.513-268.644-268.643-268.644S250.219 218.465 250.219 366.595c0 102.332 56.885 194.413 148.456 240.307l30.905 15.489c0.461-0.104 0.92-0.21 1.381-0.313-93.578-46.9-171.405-143.681-171.405-255.483z" fill="#F9F455" p-id="9732" /><path d="M567.405 630.852c96.772-78.946 181.481-151.068 181.481-264.257 0-154.52-137.314-248.557-229.811-259.571-92.497 11.014-229.811 105.051-229.811 259.571 0 113.189 84.709 185.311 181.481 264.257-135.133 40.396-315.64 166.903-315.64 242.57l-47.484-15.8c0-52.017 66.279-123.395 164.739-176.417-33.887 16.416-65.265 35.992-92.676 58.05-49.989 40.227-81.126 85.359-81.398 117.934 1.205 2.078 15.555 21.744 130.51 37.058 76.419 10.181 177.474 15.787 284.549 15.787s208.13-5.607 284.549-15.787c114.955-15.314 129.304-34.98 130.51-37.058a53.161 53.161 0 0 0-0.082-2.308l-45.278 13.447c0.001-75.665-180.506-197.08-315.639-237.476z" fill="#F9F455" p-id="9733" /><path d="M870.7 714.757c-50.888-41.544-115.007-75.104-183.718-96.525 34.645-23.171 64.273-53.335 86.944-88.767 31.096-48.599 47.532-104.919 47.532-162.87 0-40.842-8.003-80.473-23.787-117.789-15.241-36.035-37.057-68.394-64.842-96.178s-60.143-49.6-96.178-64.842C599.336 72.003 559.705 64 518.863 64s-80.473 8.003-117.789 23.787c-36.035 15.241-68.394 37.057-96.178 64.842-27.784 27.784-49.6 60.143-64.842 96.178-15.784 37.316-23.787 76.946-23.787 117.789 0 57.225 16.057 112.944 46.436 161.133a303.772 303.772 0 0 0 84.645 88.179c-70.459 20.935-136.425 54.632-188.948 96.898-59.781 48.106-94.067 100.89-94.067 144.818 0 28.579 36.319 41.913 48.254 46.294 23.919 8.781 58.013 16.369 101.334 22.554 79.127 11.296 185.465 17.518 299.424 17.518s220.297-6.221 299.424-17.518c43.322-6.185 77.416-13.773 101.334-22.554 11.935-4.381 48.254-17.714 48.254-46.294 0.001-43.239-33.407-95.311-91.657-142.867z m57.705 142.434c-1.205 2.078-15.555 21.744-130.51 37.058-76.419 10.181-177.474 15.787-284.549 15.787s-208.13-5.607-284.549-15.787c-114.954-15.314-129.304-34.98-130.51-37.058 0.273-32.575 31.41-77.708 81.398-117.934 27.411-22.058 58.789-41.635 92.676-58.05 46.44-25.008 100.038-45.932 157.219-58.815l-30.905-15.489c-91.571-45.894-148.456-137.974-148.456-240.307 0-148.13 120.513-268.644 268.644-268.644s268.643 120.513 268.643 268.644c0 102.344-59.561 197.31-151.737 241.939l-28.168 13.638c178.866 39.981 322.928 155.366 322.928 232.056l-2.206 0.655c0.039 0.774 0.075 1.547 0.082 2.307z" fill="" p-id="9734" /><path d="M107.622 857.623l47.484 15.8c0-75.667 180.507-202.175 315.64-242.57-96.772-78.946-181.481-151.068-181.481-264.257 0-154.52 137.314-248.557 229.811-259.571a165.788 165.788 0 0 0-4.069-0.435c-152.375 4.164-255.45 105.554-255.45 260.006 0 111.801 77.827 208.583 171.406 255.483-0.461 0.103-0.921 0.209-1.381 0.313-57.181 12.883-110.78 33.806-157.219 58.815-98.462 53.021-164.741 124.399-164.741 176.416zM519.075 106.498c1.361 0.022 2.716 0.055 4.069 0.092 0.555-0.052 1.109-0.104 1.66-0.15-1.919 0-3.825 0.028-5.729 0.058z" fill="#FFFFFF" p-id="9735" /><path d="M607.601 622.172c-0.138-0.031-0.275-0.063-0.413-0.093 93.579-46.9 171.406-143.682 171.406-255.483 0-154.452-103.075-255.842-255.45-260.006-1.353-0.037-2.708-0.07-4.069-0.092-1.904-0.03-3.81-0.058-5.729-0.058a161.033 161.033 0 0 1 5.729 0.585c92.497 11.014 229.811 105.051 229.811 259.571 0 113.189-84.709 185.311-181.481 264.257 135.133 40.396 315.639 161.811 315.639 237.477l45.278-13.447 2.206-0.655c0-76.69-144.062-192.075-322.927-232.056z" fill="#FF9702" p-id="9736" /></svg>
            <a style={style.lia} href={item.owner.html_url}>{item.name.substr(0, 9)}</a>
          </li>

          <li style={style.li}>
            <svg t="1573305426820" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6979" width="32" height="32"><path d="M313.991837 914.285714c-20.37551 0-40.228571-6.269388-56.946939-18.808163-30.302041-21.942857-44.930612-58.514286-38.661225-95.085714l24.032654-141.061225c3.134694-18.285714-3.134694-36.571429-16.195919-49.110204L123.297959 509.910204c-26.644898-26.122449-36.04898-64.261224-24.555102-99.787755 11.493878-35.526531 41.795918-61.126531 78.889796-66.35102l141.583674-20.375511c18.285714-2.612245 33.959184-14.106122 41.795918-30.30204l63.216326-128.522449C440.946939 130.612245 474.383673 109.714286 512 109.714286s71.053061 20.897959 87.24898 54.334694L662.987755 292.571429c8.359184 16.195918 24.032653 27.689796 41.795918 30.30204l141.583674 20.375511c37.093878 5.22449 67.395918 30.82449 78.889796 66.35102 11.493878 35.526531 2.089796 73.665306-24.555102 99.787755l-102.4 99.787755c-13.061224 12.538776-19.330612 31.346939-16.195919 49.110204l24.032654 141.061225c6.269388 37.093878-8.359184 73.142857-38.661225 95.085714-30.302041 21.942857-69.485714 24.555102-102.4 7.314286L538.122449 836.440816c-16.195918-8.359184-35.526531-8.359184-51.722449 0l-126.955102 66.87347c-14.628571 7.314286-30.302041 10.971429-45.453061 10.971428z m162.481632-96.653061z" fill="#F2CB51" p-id="6980" /></svg>
            <span style={style.lispan}>{item.watchers} stars</span>
          </li>

          <li style={style.li}>
            <svg t="1573305669472" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10094" width="32" height="32"><path d="M126.479163 230.622451a127.114737 63.557368 0 1 0 254.229473 0 127.114737 63.557368 0 1 0-254.229473 0Z" fill="#D2EAFF" p-id="10095" /><path d="M126.479163 920.673878a127.114737 63.557368 0 1 0 254.229473 0 127.114737 63.557368 0 1 0-254.229473 0Z" fill="#D2EAFF" p-id="10096" /><path d="M653.097358 902.51463a127.114737 63.557368 0 1 0 254.229473 0 127.114737 63.557368 0 1 0-254.229473 0Z" fill="#D2EAFF" p-id="10097" /><path d="M220.180883 290.003192h63.375776v412.214932H220.180883z" fill="#2E85ED" p-id="10098" /><path d="M283.556659 290.547969H220.180883c0 134.741621 130.746586 240.973222 289.09523 240.973223h5.266182c127.114737 0 225.901046 81.171839 225.901046 177.597446h63.557368c0-134.741621-130.928179-240.973222-289.458414-240.973222h-5.08459c-126.025182 0-225.901046-81.171839-225.901046-177.597447zM251.777975 695.680794a161.980493 161.980493 0 1 0 161.7989 161.798901 161.798901 161.798901 0 0 0-161.7989-161.798901z m0 63.375776a98.423125 98.423125 0 1 1-98.423125 98.423125 98.423125 98.423125 0 0 1 98.423125-98.423125z" fill="#2E85ED" p-id="10099" /><path d="M772.222025 695.680794a161.980493 161.980493 0 1 0 161.798901 161.798901 161.798901 161.798901 0 0 0-161.798901-161.798901z m0 63.375776a98.423125 98.423125 0 1 1-98.423124 98.423125 98.423125 98.423125 0 0 1 98.423124-98.423125zM251.777975 4.539812a161.798901 161.798901 0 1 0 161.7989 161.798901A161.798901 161.798901 0 0 0 251.777975 4.539812z m0 63.375776a98.423125 98.423125 0 1 1-98.423125 98.423125 98.423125 98.423125 0 0 1 98.423125-98.423125z" fill="#2E85ED" p-id="10100" /></svg>
            <span style={style.lispan}>{item.forks} forks</span>
          </li>

          <li style={style.li}>
            <svg t="1573306047108" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="14266" width="32" height="32"><path d="M895 748.9L581.9 206.6c-38.3-66.3-100.9-66.3-139.2 0L129.6 748.9c-38.3 66.4-7 120.5 69.6 120.5h626.3c76.5 0.1 107.8-54.1 69.5-120.5z m-386.3 33.7c-17.7 0-32.1-14.4-32.1-32.1 0-17.7 14.4-32.1 32.1-32.1 17.7 0 32.1 14.4 32.1 32.1 0 17.8-14.4 32.1-32.1 32.1zM540.8 640c0 17.7-14.4 32.1-32.1 32.1-17.7 0-32.1-14.4-32.1-32.1V369.7c0-17.7 14.4-32.1 32.1-32.1 17.7 0 32.1 14.4 32.1 32.1V640z" fill="#3259CE" p-id="14267" /></svg>
            <span style={style.lispan}>{item.open_issues} open_issues</span>
          </li>
        </ul>
      </li>
    ));
    return (
      <div style={style.bdiv} >
  
      <div>
        {
          this.state.loading
          ? <div>loading。。。</div>
          : <ul style={style.modeul}>
          {list}
        </ul> 
        }
      </div>
      
      </div>
    );
  }
}
export default Content;
